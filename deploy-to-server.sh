#!/bin/bash

# Script de d√©ploiement - Build local et envoi vers le serveur
# √Ä ex√©cuter depuis votre machine locale

set -e

# Configuration - MODIFIEZ CES VALEURS
SERVER_HOST="medical.nigerdev.com"  # ou l'IP de votre serveur
SERVER_USER="root"                  # ou medical
SERVER_PATH="/var/www/medicalBackend"  # chemin sur le serveur
SERVER_SERVICE="medical-backend"    # nom du service systemd

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

echo "üöÄ D√©ploiement Medical Backend vers le serveur"
echo "=============================================="

# V√©rifier qu'on est dans le bon r√©pertoire
if [ ! -f "package.json" ]; then
    log_error "Ce script doit √™tre ex√©cut√© depuis la racine du projet medicalBackend"
    exit 1
fi

# 1. Nettoyer et installer les d√©pendances
log_info "1. Installation des d√©pendances locales..."
if command -v pnpm >/dev/null 2>&1; then
    pnpm install
else
    npm install
fi

# 2. Build local
log_info "2. Compilation locale..."
rm -rf dist/
if command -v pnpm >/dev/null 2>&1; then
    pnpm run build
else
    npm run build
fi

if [ ! -d "dist" ]; then
    log_error "La compilation a √©chou√© - dossier dist non cr√©√©"
    exit 1
fi

log_success "Compilation locale r√©ussie"

# 3. Cr√©er l'archive de d√©ploiement
log_info "3. Cr√©ation de l'archive de d√©ploiement..."

# Cr√©er un dossier temporaire pour le d√©ploiement
DEPLOY_DIR="deploy-$(date +%Y%m%d-%H%M%S)"
mkdir -p "$DEPLOY_DIR"

# Copier les fichiers n√©cessaires
cp -r dist/ "$DEPLOY_DIR/"
cp package.json "$DEPLOY_DIR/"
cp package-lock.json "$DEPLOY_DIR/" 2>/dev/null || true
cp pnpm-lock.yaml "$DEPLOY_DIR/" 2>/dev/null || true

# Copier les fichiers de configuration (sans les secrets)
if [ -f ".env.production" ]; then
    cp .env.production "$DEPLOY_DIR/.env"
    log_info "Fichier .env.production copi√©"
elif [ -f "env.production.example" ]; then
    cp env.production.example "$DEPLOY_DIR/.env.example"
    log_warning "Copiez env.production.example vers .env et configurez-le sur le serveur"
fi

# Cr√©er l'archive
tar -czf "${DEPLOY_DIR}.tar.gz" "$DEPLOY_DIR"
log_success "Archive cr√©√©e: ${DEPLOY_DIR}.tar.gz"

# 4. Envoyer vers le serveur
log_info "4. Envoi vers le serveur..."

# V√©rifier la connexion SSH
if ! ssh -o ConnectTimeout=10 "$SERVER_USER@$SERVER_HOST" "echo 'Connexion SSH OK'" >/dev/null 2>&1; then
    log_error "Impossible de se connecter au serveur $SERVER_USER@$SERVER_HOST"
    log_info "V√©rifiez votre configuration SSH ou utilisez:"
    echo "ssh-copy-id $SERVER_USER@$SERVER_HOST"
    exit 1
fi

# Envoyer l'archive
scp "${DEPLOY_DIR}.tar.gz" "$SERVER_USER@$SERVER_HOST:/tmp/"
log_success "Archive envoy√©e sur le serveur"

# 5. D√©ployer sur le serveur
log_info "5. D√©ploiement sur le serveur..."

ssh "$SERVER_USER@$SERVER_HOST" << EOF
set -e

echo "üîÑ D√©ploiement en cours sur le serveur..."

# Arr√™ter le service
if systemctl is-active --quiet $SERVER_SERVICE; then
    echo "Arr√™t du service $SERVER_SERVICE..."
    systemctl stop $SERVER_SERVICE
fi

# Sauvegarder l'ancienne version
if [ -d "$SERVER_PATH" ]; then
    echo "Sauvegarde de l'ancienne version..."
    mv "$SERVER_PATH" "${SERVER_PATH}.backup-\$(date +%Y%m%d-%H%M%S)" 2>/dev/null || true
fi

# Cr√©er le r√©pertoire de destination
mkdir -p "$SERVER_PATH"

# Extraire la nouvelle version
cd /tmp
tar -xzf "${DEPLOY_DIR}.tar.gz"
mv "${DEPLOY_DIR}"/* "$SERVER_PATH/"

# Nettoyer
rm -rf "${DEPLOY_DIR}" "${DEPLOY_DIR}.tar.gz"

# Aller dans le r√©pertoire de l'application
cd "$SERVER_PATH"

# Installer les d√©pendances de production uniquement
echo "Installation des d√©pendances de production..."
if command -v pnpm >/dev/null 2>&1; then
    pnpm install --prod --frozen-lockfile
else
    npm ci --only=production
fi

# Configurer les permissions
if [ "$SERVER_USER" = "root" ]; then
    chown -R medical:medical "$SERVER_PATH" 2>/dev/null || true
fi

# V√©rifier le fichier .env
if [ ! -f ".env" ]; then
    echo "‚ö†Ô∏è  ATTENTION: Fichier .env manquant !"
    echo "Copiez et configurez le fichier .env avant de d√©marrer le service"
    if [ -f ".env.example" ]; then
        echo "Exemple disponible dans .env.example"
    fi
else
    echo "‚úÖ Fichier .env trouv√©"
fi

echo "‚úÖ D√©ploiement termin√©"
EOF

# 6. Red√©marrer le service
log_info "6. Red√©marrage du service..."

ssh "$SERVER_USER@$SERVER_HOST" << EOF
# Red√©marrer le service
echo "Red√©marrage du service $SERVER_SERVICE..."
systemctl start $SERVER_SERVICE

# Attendre un peu
sleep 3

# V√©rifier le statut
if systemctl is-active --quiet $SERVER_SERVICE; then
    echo "‚úÖ Service $SERVER_SERVICE d√©marr√© avec succ√®s"
    systemctl status $SERVER_SERVICE --no-pager -l
else
    echo "‚ùå √âchec du d√©marrage du service"
    echo "Logs d'erreur:"
    journalctl -u $SERVER_SERVICE -n 10 --no-pager
    exit 1
fi
EOF

# 7. Test de sant√©
log_info "7. Test de sant√© de l'application..."

sleep 5  # Attendre que l'application d√©marre

if curl -f -s "https://$SERVER_HOST/health" >/dev/null 2>&1; then
    log_success "‚úÖ Application accessible sur https://$SERVER_HOST/health"
elif curl -f -s "http://$SERVER_HOST:3001/health" >/dev/null 2>&1; then
    log_success "‚úÖ Application accessible sur http://$SERVER_HOST:3001/health"
else
    log_warning "‚ö†Ô∏è  Impossible de v√©rifier la sant√© de l'application"
    log_info "V√©rifiez manuellement avec:"
    echo "curl https://$SERVER_HOST/health"
fi

# Nettoyer les fichiers locaux
log_info "8. Nettoyage..."
rm -rf "$DEPLOY_DIR" "${DEPLOY_DIR}.tar.gz"

echo ""
log_success "üéâ D√©ploiement termin√© avec succ√®s !"
echo ""
echo "üìã R√©sum√©:"
echo "   ‚Ä¢ Build local: ‚úÖ"
echo "   ‚Ä¢ Envoi vers serveur: ‚úÖ"
echo "   ‚Ä¢ Installation: ‚úÖ"
echo "   ‚Ä¢ Service red√©marr√©: ‚úÖ"
echo ""
echo "üîç Pour surveiller les logs:"
echo "   ssh $SERVER_USER@$SERVER_HOST 'journalctl -u $SERVER_SERVICE -f'"
echo ""
echo "üåê Application accessible sur:"
echo "   https://$SERVER_HOST"
