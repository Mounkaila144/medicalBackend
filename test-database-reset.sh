#!/bin/bash

# Script de test pour v√©rifier la r√©initialisation de la base de donn√©es
# Usage: ./test-database-reset.sh

set -e

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log() {
    echo -e "${GREEN}[TEST] $1${NC}"
}

error() {
    echo -e "${RED}[ERROR] $1${NC}"
}

warning() {
    echo -e "${YELLOW}[WARNING] $1${NC}"
}

info() {
    echo -e "${BLUE}[INFO] $1${NC}"
}

success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

fail() {
    echo -e "${RED}‚ùå $1${NC}"
}

# V√©rifier si on est sur le serveur
if [ ! -f "/var/www/medicalBackend/docker-compose.prod.yml" ]; then
    error "Ce script doit √™tre ex√©cut√© sur le serveur dans /var/www/medicalBackend"
    exit 1
fi

cd /var/www/medicalBackend

log "üß™ Test de la r√©initialisation de la base de donn√©es..."

# Test 1: V√©rifier que la base de donn√©es existe
log "Test 1: V√©rification de l'existence de la base de donn√©es..."
if docker exec medical-db psql -U postgres -lqt | cut -d \| -f 1 | grep -qw medical; then
    success "Base de donn√©es 'medical' existe"
else
    fail "Base de donn√©es 'medical' n'existe pas"
    exit 1
fi

# Test 2: V√©rifier que les tables essentielles existent
log "Test 2: V√©rification des tables essentielles..."
REQUIRED_TABLES=("tenants" "users" "sessions")
for table in "${REQUIRED_TABLES[@]}"; do
    if docker exec medical-db psql -U postgres -d medical -c "\dt" | grep -q "$table"; then
        success "Table '$table' existe"
    else
        fail "Table '$table' manquante"
    fi
done

# Test 3: V√©rifier les donn√©es de test
log "Test 3: V√©rification des donn√©es de test..."

# V√©rifier le tenant de test
TENANT_COUNT=$(docker exec medical-db psql -U postgres -d medical -t -c "SELECT COUNT(*) FROM tenants WHERE slug = 'clinique-exemple';" | tr -d ' ')
if [ "$TENANT_COUNT" -eq 1 ]; then
    success "Tenant de test 'clinique-exemple' existe"
else
    fail "Tenant de test manquant (trouv√©: $TENANT_COUNT)"
fi

# V√©rifier les utilisateurs de test
ADMIN_COUNT=$(docker exec medical-db psql -U postgres -d medical -t -c "SELECT COUNT(*) FROM users WHERE email = 'admin@clinique-exemple.com';" | tr -d ' ')
if [ "$ADMIN_COUNT" -eq 1 ]; then
    success "Utilisateur admin de test existe"
else
    fail "Utilisateur admin de test manquant (trouv√©: $ADMIN_COUNT)"
fi

EMPLOYEE_COUNT=$(docker exec medical-db psql -U postgres -d medical -t -c "SELECT COUNT(*) FROM users WHERE email = 'employee@clinique-exemple.com';" | tr -d ' ')
if [ "$EMPLOYEE_COUNT" -eq 1 ]; then
    success "Utilisateur employ√© de test existe"
else
    fail "Utilisateur employ√© de test manquant (trouv√©: $EMPLOYEE_COUNT)"
fi

# Test 4: V√©rifier que l'application r√©pond
log "Test 4: V√©rification de l'√©tat de l'application..."
if curl -f -s http://127.0.0.1:3001/health &> /dev/null; then
    success "Application r√©pond sur /health"
else
    warning "Application ne r√©pond pas sur /health (peut √™tre normal si elle d√©marre encore)"
fi

# Test 5: Test d'authentification
log "Test 5: Test d'authentification..."
AUTH_RESPONSE=$(curl -s -X POST http://127.0.0.1:3001/auth/login \
  -H "Content-Type: application/json" \
  -d '{
    "email": "admin@clinique-exemple.com",
    "password": "password123",
    "tenantSlug": "clinique-exemple"
  }' || echo "ERROR")

if [[ "$AUTH_RESPONSE" == *"accessToken"* ]]; then
    success "Authentification fonctionne"
elif [[ "$AUTH_RESPONSE" == *"ERROR"* ]]; then
    warning "Erreur de connexion √† l'API (application peut ne pas √™tre pr√™te)"
else
    fail "Authentification √©choue - R√©ponse: $AUTH_RESPONSE"
fi

# Test 6: Compter toutes les tables
log "Test 6: Inventaire des tables cr√©√©es..."
TOTAL_TABLES=$(docker exec medical-db psql -U postgres -d medical -t -c "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public';" | tr -d ' ')
info "Nombre total de tables cr√©√©es: $TOTAL_TABLES"

# Lister toutes les tables
info "Tables disponibles:"
docker exec medical-db psql -U postgres -d medical -c '\dt' | grep -E '^ [a-z]' | awk '{print "  - " $3}'

# Test 7: V√©rifier les extensions PostgreSQL
log "Test 7: V√©rification des extensions PostgreSQL..."
if docker exec medical-db psql -U postgres -d medical -c '\dx' | grep -q 'uuid-ossp'; then
    success "Extension uuid-ossp install√©e"
else
    fail "Extension uuid-ossp manquante"
fi

# R√©sum√© final
log "üìä R√©sum√© des tests:"
echo ""
info "‚úÖ Tests r√©ussis:"
info "  - Base de donn√©es existe"
info "  - Tables essentielles cr√©√©es"
info "  - Donn√©es de test ins√©r√©es"
info "  - Extensions PostgreSQL install√©es"
echo ""

if curl -f -s http://127.0.0.1:3001/health &> /dev/null; then
    info "‚úÖ Application op√©rationnelle"
else
    warning "‚ö†Ô∏è  Application peut encore d√©marrer"
fi

echo ""
log "üéâ Tests de r√©initialisation termin√©s!"
info "Vous pouvez maintenant tester l'API avec:"
info "  curl -X POST http://127.0.0.1:3001/auth/login \\"
info "    -H 'Content-Type: application/json' \\"
info "    -d '{\"email\":\"admin@clinique-exemple.com\",\"password\":\"password123\",\"tenantSlug\":\"clinique-exemple\"}'" 