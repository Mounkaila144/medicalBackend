#!/bin/bash

# Script de v√©rification du statut de l'application m√©dicale
# Usage: ./check-status.sh

# Couleurs
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}=== V√©rification du statut de l'application m√©dicale ===${NC}"
echo ""

# V√©rifier Docker
echo -e "${BLUE}üê≥ Docker:${NC}"
if docker --version &> /dev/null; then
    echo -e "  ${GREEN}‚úÖ Docker install√©${NC}"
else
    echo -e "  ${RED}‚ùå Docker non install√©${NC}"
fi

# V√©rifier Docker Compose
echo -e "${BLUE}üêô Docker Compose:${NC}"
if docker-compose --version &> /dev/null; then
    echo -e "  ${GREEN}‚úÖ Docker Compose install√©${NC}"
else
    echo -e "  ${RED}‚ùå Docker Compose non install√©${NC}"
fi

echo ""

# V√©rifier les conteneurs
echo -e "${BLUE}üì¶ Conteneurs:${NC}"
if docker ps --format "table {{.Names}}\t{{.Status}}" | grep -E "(medical-|postgres|rabbitmq|minio)" &> /dev/null; then
    docker ps --format "table {{.Names}}\t{{.Status}}" | grep -E "(medical-|postgres|rabbitmq|minio)" | while read line; do
        if echo "$line" | grep -q "Up"; then
            echo -e "  ${GREEN}‚úÖ $line${NC}"
        else
            echo -e "  ${RED}‚ùå $line${NC}"
        fi
    done
else
    echo -e "  ${YELLOW}‚ö†Ô∏è Aucun conteneur m√©dical en cours d'ex√©cution${NC}"
fi

echo ""

# V√©rifier les services
echo -e "${BLUE}üåê Services:${NC}"

# Application principale
if curl -f -s http://localhost:3000/health &> /dev/null; then
    echo -e "  ${GREEN}‚úÖ Application (port 3000)${NC}"
else
    echo -e "  ${RED}‚ùå Application (port 3000)${NC}"
fi

# PostgreSQL
if docker exec medical-db pg_isready -U postgres &> /dev/null 2>&1; then
    echo -e "  ${GREEN}‚úÖ PostgreSQL (port 5432)${NC}"
else
    echo -e "  ${RED}‚ùå PostgreSQL (port 5432)${NC}"
fi

# RabbitMQ
if curl -f -s http://localhost:15672 &> /dev/null; then
    echo -e "  ${GREEN}‚úÖ RabbitMQ Management (port 15672)${NC}"
else
    echo -e "  ${RED}‚ùå RabbitMQ Management (port 15672)${NC}"
fi

# MinIO
if curl -f -s http://localhost:9001 &> /dev/null; then
    echo -e "  ${GREEN}‚úÖ MinIO Console (port 9001)${NC}"
else
    echo -e "  ${RED}‚ùå MinIO Console (port 9001)${NC}"
fi

echo ""

# V√©rifier l'utilisation des ressources
echo -e "${BLUE}üíæ Ressources:${NC}"
echo -e "  ${BLUE}M√©moire:${NC} $(free -h | awk '/^Mem:/ {print $3 "/" $2}')"
echo -e "  ${BLUE}Disque:${NC} $(df -h / | awk 'NR==2 {print $3 "/" $2 " (" $5 " utilis√©)"}')"

# V√©rifier les logs r√©cents
echo ""
echo -e "${BLUE}üìã Logs r√©cents (derni√®res 5 lignes):${NC}"
if [ -f "/var/log/medical-deploy.log" ]; then
    tail -5 /var/log/medical-deploy.log 2>/dev/null || echo -e "  ${YELLOW}‚ö†Ô∏è Impossible de lire les logs de d√©ploiement${NC}"
else
    echo -e "  ${YELLOW}‚ö†Ô∏è Fichier de log de d√©ploiement non trouv√©${NC}"
fi

echo ""
echo -e "${BLUE}=== Fin de la v√©rification ===${NC}"

# Commandes utiles
echo ""
echo -e "${BLUE}üìö Commandes utiles:${NC}"
echo -e "  ${YELLOW}Voir les logs:${NC} docker-compose -f docker-compose.prod.yml logs -f"
echo -e "  ${YELLOW}Red√©marrer:${NC} docker-compose -f docker-compose.prod.yml restart"
echo -e "  ${YELLOW}Arr√™ter:${NC} docker-compose -f docker-compose.prod.yml down"
echo -e "  ${YELLOW}D√©marrer:${NC} docker-compose -f docker-compose.prod.yml up -d" 